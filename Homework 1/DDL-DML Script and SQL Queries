-- Recording labels represent music companies that publish and distribute albums
-- Each label has a unique identifier, name, and location
CREATE TABLE recording_label(
    label_id VARCHAR(50) PRIMARY KEY,
    label_name VARCHAR(255),
    location VARCHAR(255)
);

INSERT INTO recording_label(label_id, label_name, location)
VALUES
('Label_1', 'A&M Records', 'Los Angeles'),
('Label_2', 'Reprise Records', 'New York'),
('Label_3', 'Disney Records', 'Los Angeles'),
('Label_4', 'Country Club', 'Detroit'),
('Label_5', 'Gray Dot Records', 'Detroit'),
('Label_6', 'Disney Records', 'Detroit'),
('Label_7', 'BMG Records', 'Phoenix'),
('Label_8', 'Universal Records', 'Texas'),
('Label_9', 'Parkwood Entertainment', 'Los Angeles'),
('Label_10', 'Big Machine Records', 'Nashville'),
('Label_11', 'Republic Records', 'New York'),
('Label_12', 'Taylor Swift Productions', 'Nashville');

-- Artists are individual musicians or performers in the music industry
-- Each artist has personal information including birth year
CREATE TABLE artist(
    artist_id VARCHAR(50) PRIMARY KEY,
    first_name VARCHAR(20), 
    last_name VARCHAR(20),
    year_born INT
);

INSERT INTO artist(artist_id,first_name,last_name, year_born)
VALUES
('Artist_1', 'Bjorn', 'Friedman', 1945),
('Artist_2', 'Heidi', 'Helmut', 1945),
('Artist_3', 'John', 'Stark', 1971),
('Artist_4', 'Michael', 'Agnelo', 1975),
('Artist_5', 'Michelle', 'Agnelo', 1975),
('Artist_6', 'Francis', 'McDermott', 1960),
('Artist_7', 'Steve', 'Nash', 1965),
('Artist_8', 'Lisa', 'Raymond', 1973),
('Artist_9', 'Janet', 'Brown', 1972),
('Artist_10', 'Henry', 'Brown', 1966),
('Artist_11', 'Keith', 'Urban', 1970),
('Artist_12', 'John', 'Hopkins', 1960),
('Artist_13', 'Jim', 'Kate', 1970),
('Artist_14', 'Jacky', 'Chen', 1945),
('Artist_15', 'Beyonce', 'Carter', 1981),
('Artist_16', 'Taylor', 'Swift', 1989);

-- Musical groups are bands or ensembles that perform together
-- Groups can consist of multiple artists as members
CREATE TABLE musical_group(
    group_code VARCHAR(50) PRIMARY KEY,
    group_name VARCHAR(255)
);

INSERT INTO musical_group(group_code, group_name)
VALUES 
('Group_1', 'Deutsch Moss'),
('Group_2', 'Sweet Symphony'),
('Group_3', 'Thundering Typhoons'),
('Group_4', 'Great Snakes'),
('Group_5', 'Keith Urban'),
('Group_6', 'Beyond'),
('Group_7', 'Backstreet Boys'),
('Group_8', 'Tomorrow'),
('Group_9', 'Destinys Child'),
('Group_10', 'Taylor Swift');

-- Member table tracks which artists belong to which musical groups
-- Includes date ranges for membership periods (from_date to to_date)
-- A to_date of 0 indicates current membership
CREATE TABLE member(
    group_code VARCHAR(50),
    artist_id VARCHAR(50), 
    from_date INT,
    to_date INT,
    PRIMARY KEY (group_code, artist_id, from_date),
    FOREIGN KEY (group_code) REFERENCES musical_group(group_code), 
    FOREIGN KEY (artist_id) REFERENCES artist(artist_id)
);

INSERT INTO member(group_code, artist_id, from_date, to_date)
VALUES
('Group_1', 'Artist_1', 1970, 1990),
('Group_2', 'Artist_1', 1991, 0),
('Group_1', 'Artist_2', 1970, 1990),
('Group_1', 'Artist_3', 1971, 0),
('Group_2', 'Artist_4', 1995, 0),
('Group_5', 'Artist_4', 1997, 0),
('Group_2', 'Artist_5', 1995, 2003),
('Group_3', 'Artist_6', 1985, 0),
('Group_3', 'Artist_7', 2000, 0),
('Group_1', 'Artist_8', 1991, 2003),
('Group_4', 'Artist_9', 1990, 2003),
('Group_1', 'Artist_9', 1980, 2003),
('Group_2', 'Artist_9', 1998, 0),
('Group_4', 'Artist_10', 1990, 0),
('Group_6', 'Artist_10', 1998, 0),
('Group_5', 'Artist_11', 1980, 2003),
('Group_8', 'Artist_10', 1950, 1978),
('Group_7', 'Artist_1', 1980, 0),
('Group_7', 'Artist_2', 1967, 1969),
('Group_7', 'Artist_3', 1980, 1981),
('Group_2', 'Artist_14', 1960, 0),
('Group_9', 'Artist_15', 1990, 0),
('Group_10', 'Artist_16', 2006, 0);

-- CDs represent albums or music releases by musical groups
-- Includes sales data, release year, and publishing information
CREATE TABLE cd(
    cd_code VARCHAR(50) PRIMARY KEY,
    cd_title VARCHAR(50),
    number_sold INT,
    year INT,
    label_id VARCHAR(50), 
    group_code VARCHAR(50)
);

INSERT INTO cd (cd_code, cd_title, number_sold, year, label_id, group_code)
VALUES 
('CD_1', 'Goodnight', 500000, 2001, 'Label_1', 'Group_1'),
('CD_2', 'Sweet Dreams', 100000, 1990, 'Label_6', 'Group_2'),
('CD_3', 'Forgotten', 800000, 1998, 'Label_4', 'Group_2'),
('CD_4', 'Friday Night', 800000, 2003, 'Label_1', 'Group_3'),
('CD_5', 'Hot As Hell', 750000, 2003, 'Label_3', 'Group_3'),
('CD_6', 'Golden Hits', 400000, 1998, 'Label_3', 'Group_4'),
('CD_7', 'Broken', 600000, 2003, 'Label_1', 'Group_4'),
('CD_8', 'Golden Road', 800000, 2003, 'Label_3', 'Group_4'),
('CD_9', 'Function', 100000, 2002, 'Label_2', 'Group_4'),
('CD_10', 'Be Here', 790000, 2003, 'Label_1', 'Group_5'),
('CD_11', 'Ranch', 450000, 2003, 'Label_5', 'Group_2'),
('CD_12', 'Horse of a Different Color', 900000, 2001, 'Label_1', 'Group_5'),
('CD_13', 'Rain', 450000, 2000, 'Label_1', 'Group_5'),
('CD_14', 'Color', 40000, 2000, 'Label_4', 'Group_1'),
('CD_15', 'Wonderful', 89000, 1997, 'Label_5', 'Group_5'),
('CD_16', 'Happy', 99000, 1994, 'Label_6', 'Group_5'),
('CD_17', 'Moon Lake', 25000, 1998, 'Label_4', 'Group_6'),
('CD_18', 'Summer Fiesta', 75000, 2003, 'Label_5', 'Group_6'),
('CD_19', 'Kettie', 800000, 2001, 'Label_6', 'Group_6'),
('CD_20', 'Celebrate', 790000, 2003, 'Label_2', 'Group_6'),
('CD_21', 'Sunshine', 34000, 2001, 'Label_8', 'Group_6'),
('CD_22', 'Lemonade', 500000, 2016, 'Label_9', 'Group_9'),
('CD_23', 'Fearless', 7200000, 2008, 'Label_10', 'Group_10'),
('CD_24', 'Speak Now', 4700000, 2010, 'Label_10', 'Group_10'),
('CD_25', 'Red', 6000000, 2012, 'Label_10', 'Group_10'),
('CD_26', '1989', 10100000, 2014, 'Label_10', 'Group_10'),
('CD_27', 'Reputation', 4500000, 2017, 'Label_10', 'Group_10'),
('CD_28', 'Folklore', 3200000, 2020, 'Label_11', 'Group_10'),
('CD_29', 'Evermore', 2300000, 2020, 'Label_11', 'Group_10'),
('CD_30', 'Midnights', 5800000, 2022, 'Label_11', 'Group_10');

-- Top CDs tracks the highest-rated albums for each year
-- Lower rating numbers indicate higher chart positions (1 = #1 hit)
CREATE TABLE top_cds
(
    cd_code VARCHAR(50) PRIMARY KEY,
    year INT,
    rating INT
);

INSERT INTO top_cds(cd_code, year, rating)
VALUES 
('CD_1', 2001, 2),
('CD_2', 1990, 1),
('CD_3', 1998, 6),
('CD_4', 2003, 3),
('CD_5', 2003, 9),
('CD_6', 1998, 1),
('CD_7', 2003, 2),
('CD_8', 2003, 1),
('CD_9', 2002, 5),
('CD_10', 2003, 4),
('CD_11', 2003, 11),
('CD_12', 2001, 1),
('CD_13', 2000, 15),
('CD_22', 2016, 3),
('CD_23', 2008, 1),
('CD_24', 2010, 2),
('CD_25', 2012, 1),
('CD_26', 2014, 1),
('CD_27', 2017, 1),
('CD_28', 2020, 1),
('CD_29', 2020, 2),
('CD_30', 2022, 1);

-- Songs are individual musical tracks that can appear on multiple albums
-- Each song has a unique code and title
CREATE TABLE song(
    song_code VARCHAR(50) PRIMARY KEY,
    song_title varchar(255)
);

INSERT INTO song(song_code, song_title)
VALUES
('Song_1', 'Sweet Dreams'),
('Song_2', 'Goodnight'),
('Song_3', 'My Lullaby'),
('Song_4', 'I Have A Dream'),
('Song_5', 'Forgotten'),
('Song_6', 'How Could You'),
('Song_7', 'Breathless'),
('Song_8', 'My Oh My'),
('Song_9', 'Ooh La La'),
('Song_10', 'Fire'),
('Song_11', 'Hot As Hell'),
('Song_12', 'Goldilocks'),
('Song_13', 'One Of Us'),
('Song_14', 'Mamma Mia'),
('Song_15', 'Broken'),
('Song_16', 'Life Or Death'),
('Song_17', 'Days Go By'),
('Song_18', 'Another Day in Paradise'),
('Song_19', 'Smile'),
('Song_20', 'Formation'),
('Song_21', 'Freedom'),
('Song_22', 'Love Drought'),
('Song_23', 'Lover'),
('Song_24', 'Anti-Hero'),
('Song_25', 'All too well'),
('Song_26', 'Love Story'),
('Song_27', 'You Belong With Me'),
('Song_28', 'White Horse'),
('Song_29', 'Back to December'),
('Song_30', 'Mean'),
('Song_31', 'We Are Never Ever Getting Back Together'),
('Song_32', 'I Knew You Were Trouble'),
('Song_33', '22'),
('Song_34', 'Shake It Off'),
('Song_35', 'Blank Space'),
('Song_36', 'Bad Blood'),
('Song_37', 'Look What You Made Me Do'),
('Song_38', 'Delicate'),
('Song_39', 'Cardigan'),
('Song_40', 'Willow'),
('Song_41', 'August'),
('Song_42', 'Champagne Problems'),
('Song_43', 'Lavender Haze'),
('Song_44', 'Karma'),
('Song_45', 'Bejeweled');

-- Composed_of links songs to the CDs they appear on
-- Includes track number to show song order on each album
CREATE TABLE composed_of(
    cd_code VARCHAR (50),
    song_code VARCHAR(50),
    track_number INT,
    PRIMARY KEY(cd_code, song_code),
    FOREIGN KEY (cd_code)
        REFERENCES cd(cd_code),
    FOREIGN KEY (song_code) 
        REFERENCES song(song_code)
);

INSERT INTO composed_of(cd_code, song_code, track_number)
VALUES 
('CD_1', 'Song_1', 1),
('CD_1', 'Song_2', 2),
('CD_1', 'Song_3', 3),
('CD_1', 'Song_12', 4),
('CD_1', 'Song_11', 5),
('CD_1', 'Song_13', 6),
('CD_1', 'Song_10', 7),
('CD_1', 'Song_8', 8),
('CD_2', 'Song_4', 1),
('CD_3', 'Song_5', 1),
('CD_3', 'Song_6', 2),
('CD_4', 'Song_7', 1),
('CD_4', 'Song_8', 2),
('CD_4', 'Song_9', 3),
('CD_5', 'Song_10', 1),
('CD_5', 'Song_11', 2),
('CD_5', 'Song_8', 3),
('CD_6', 'Song_12', 1),
('CD_6', 'Song_13', 2),
('CD_6', 'Song_14', 3),
('CD_7', 'Song_15', 1),
('CD_7', 'Song_16', 2),
('CD_7', 'Song_10', 3),
('CD_8', 'Song_17', 1),
('CD_8', 'Song_18', 2),
('CD_8', 'Song_1', 3),
('CD_8', 'Song_2', 4),
('CD_8', 'Song_7', 5),
('CD_8', 'Song_19', 6),
('CD_8', 'Song_8', 7),
('CD_8', 'Song_9', 8),
('CD_8', 'Song_11', 9),
('CD_8', 'Song_12', 10),
('CD_9', 'Song_18', 1),
('CD_9', 'Song_1', 2),
('CD_9', 'Song_2', 3),
('CD_9', 'Song_3', 4),
('CD_9', 'Song_4', 5),
('CD_9', 'Song_5', 6),
('CD_9', 'Song_6', 7),
('CD_9', 'Song_7', 8),
('CD_9', 'Song_8', 9),
('CD_10', 'Song_1', 1),
('CD_10', 'Song_2', 2),
('CD_11', 'Song_2', 1),
('CD_11', 'Song_3', 2),
('CD_12', 'Song_3', 1),
('CD_13', 'Song_1', 1),
('CD_13', 'Song_7', 2),
('CD_13', 'Song_6', 3),
('CD_13', 'Song_2', 4),
('CD_13', 'Song_3', 5),
('CD_13', 'Song_4', 6),
('CD_13', 'Song_5', 7),
('CD_14', 'Song_5', 1),
('CD_14', 'Song_6', 2),
('CD_14', 'Song_7', 3),
('CD_14', 'Song_8', 4),
('CD_14', 'Song_9', 5),
('CD_15', 'Song_6', 1),
('CD_16', 'Song_8', 1),
('CD_16', 'Song_9', 2),
('CD_17', 'Song_9', 1),
('CD_18', 'Song_1', 1),
('CD_18', 'Song_10', 2),
('CD_18', 'Song_13', 3),
('CD_19', 'Song_1', 1),
('CD_19', 'Song_2', 2),
('CD_19', 'Song_3', 3),
('CD_20', 'Song_4', 1),
('CD_20', 'Song_14', 2),
('CD_20', 'Song_10', 3),
('CD_21', 'Song_14', 1),
('CD_21', 'Song_7', 2),
('CD_21', 'Song_18', 3),
('CD_21', 'Song_13', 4),
('CD_21', 'Song_1', 5),
('CD_21', 'Song_19', 6),
('CD_21', 'Song_17', 7),
('CD_21', 'Song_5', 8),
('CD_22', 'Song_20', 1),
('CD_22', 'Song_21', 2),
('CD_22', 'Song_22', 3),
('CD_23', 'Song_26', 1),
('CD_23', 'Song_27', 2),
('CD_23', 'Song_28', 3),
('CD_23', 'Song_25', 4),
('CD_24', 'Song_29', 1),
('CD_24', 'Song_30', 2),
('CD_25', 'Song_31', 1),
('CD_25', 'Song_32', 2),
('CD_25', 'Song_33', 3),
('CD_26', 'Song_34', 1),
('CD_26', 'Song_35', 2),
('CD_26', 'Song_36', 3),
('CD_27', 'Song_37', 1),
('CD_27', 'Song_38', 2),
('CD_28', 'Song_39', 1),
('CD_28', 'Song_41', 2),
('CD_29', 'Song_40', 1),
('CD_29', 'Song_42', 2),
('CD_30', 'Song_43', 1),
('CD_30', 'Song_24', 2),
('CD_30', 'Song_44', 3),
('CD_30', 'Song_45', 4);

-- Written_by tracks which artists wrote or composed each song
-- Multiple artists can collaborate on writing a single song
CREATE TABLE written_by(
    song_code VARCHAR(50),
    artist_id VARCHAR (50),
    PRIMARY KEY (song_code, artist_id),
    FOREIGN KEY (song_code)
        REFERENCES song(song_code),
    FOREIGN KEY (artist_id)
        REFERENCES artist(artist_id)
);

INSERT INTO written_by(song_code, artist_id)
VALUES
('Song_1', 'Artist_1'),
('Song_2', 'Artist_1'),
('Song_3', 'Artist_12'),
('Song_4', 'Artist_3'),
('Song_5', 'Artist_1'),
('Song_5', 'Artist_2'),
('Song_6', 'Artist_2'),
('Song_7', 'Artist_6'),
('Song_8', 'Artist_7'),
('Song_9', 'Artist_7'),
('Song_10', 'Artist_8'),
('Song_11', 'Artist_3'),
('Song_12', 'Artist_8'),
('Song_13', 'Artist_8'),
('Song_14', 'Artist_8'),
('Song_15', 'Artist_8'),
('Song_16', 'Artist_9'),
('Song_17', 'Artist_4'),
('Song_18', 'Artist_10'),
('Song_19', 'Artist_13'),
('Song_20', 'Artist_15'),
('Song_21', 'Artist_15'),
('Song_22', 'Artist_15'),
('Song_23', 'Artist_16'),
('Song_24', 'Artist_16'),
('Song_25', 'Artist_16'),
('Song_26', 'Artist_16'),
('Song_27', 'Artist_16'),
('Song_28', 'Artist_16'),
('Song_29', 'Artist_16'),
('Song_30', 'Artist_16'),
('Song_31', 'Artist_16'),
('Song_32', 'Artist_16'),
('Song_33', 'Artist_16'),
('Song_34', 'Artist_16'),
('Song_35', 'Artist_16'),
('Song_36', 'Artist_16'),
('Song_37', 'Artist_16'),
('Song_38', 'Artist_16'),
('Song_39', 'Artist_16'),
('Song_40', 'Artist_16'),
('Song_41', 'Artist_16'),
('Song_42', 'Artist_16'),
('Song_43', 'Artist_16'),
('Song_44', 'Artist_16'),
('Song_45', 'Artist_16');

-- Top songs tracks the highest-rated individual songs for each year
-- Lower rating numbers indicate higher chart positions (1 = #1 hit)
CREATE TABLE top_songs(
    song_code VARCHAR(50) PRIMARY KEY,
    year INT,
    rating INT,
    FOREIGN KEY (song_code)
        REFERENCES song(song_code)
);

INSERT INTO top_songs(song_code, year, rating)
VALUES 
('Song_1', 1987, 5),
('Song_2', 1987, 1),
('Song_4', 1990, 1),
('Song_5', 1998, 3),
('Song_6', 1998, 5),
('Song_8', 2000, 4),
('Song_10', 1993, 2),
('Song_11', 1993, 13),
('Song_12', 1998, 1),
('Song_14', 1998, 4),
('Song_15', 1999, 1),
('Song_16', 1999, 3),
('Song_17', 2003, 1),
('Song_18', 2003, 12),
('Song_19', 2000, 1),
('Song_20', 2016, 1),
('Song_23', 2019, 2),
('Song_24', 2022, 1),
('Song_25', 2012, 4),
('Song_26', 2008, 1),
('Song_27', 2008, 2),
('Song_29', 2010, 3),
('Song_31', 2012, 1),
('Song_32', 2012, 2),
('Song_34', 2014, 1),
('Song_35', 2014, 2),
('Song_37', 2017, 1),
('Song_39', 2020, 1),
('Song_40', 2020, 2),
('Song_43', 2022, 2),
('Song_44', 2022, 3);

--Question 1
SELECT artist_id, first_name, last_name
FROM artist
WHERE year_born = 1989;

--Question 2

SELECT song_title 
FROM song 
WHERE song_code IN (
  SELECT song_code
  FROM composed_of
  WHERE cd_code = (
    SELECT cd_code 
    FROM cd
    WHERE cd = 'Midnights'
    )
  )
ORDER BY song_title;

--Question 3 
SELECT COUNT (*) num_songs
FROM top_songs, written_by
WHERE top_songs.song_code = written_by.song_code
	AND written_by.artist_id = 'Artist_16'
	AND top_songs.rating = 1;

--Question 4
SELECT year, AVG(number_sold)
FROM cd
WHERE group_code = 'Group_10'
GROUP BY year
ORDER BY AVG(number_sold) desc; 

--Question 5
SELECT cd_title, number_sold
FROM cd
WHERE number_sold > (
	SELECT AVG(number_sold)
	FROM cd
	WHERE group_code = ‘Group_10’
)
ORDER BY number_sold desc;

--Question 6
SELECT year,
       (
         -- Count #1 CDs by Taylor Swift’s group
         (SELECT COUNT(*)
          FROM top_cds
          WHERE rating = 1
            AND cd_code IN (
                SELECT cd_code
                FROM cd
                WHERE group_code = 'Group_10'
            )
            AND year = t.year
         )
         +
         -- Count #1 songs written by Taylor Swift
         (SELECT COUNT(*)
          FROM top_songs
          WHERE rating = 1
            AND song_code IN (
                SELECT song_code
                FROM written_by
                WHERE artist_id = 'Artist_16'
            )
            AND year = t.year
         )
       ) AS number_one_hits
FROM (
    -- Get all distinct years where either CDs or songs could have #1 hits
    SELECT DISTINCT year
    FROM top_cds
    UNION
    SELECT DISTINCT year
    FROM top_songs
) t
WHERE (
        (SELECT COUNT(*)
         FROM top_cds
         WHERE rating = 1
           AND cd_code IN (
               SELECT cd_code
               FROM cd
               WHERE group_code = 'Group_10'
           )
           AND year = t.year
        )
        +
        (SELECT COUNT(*)
         FROM top_songs
         WHERE rating = 1
           AND song_code IN (
               SELECT song_code
               FROM written_by
               WHERE artist_id = 'Artist_16'
           )
           AND year = t.year
        )
      ) > 1
ORDER BY year ASC;
